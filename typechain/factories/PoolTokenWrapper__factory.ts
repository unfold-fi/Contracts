/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { PoolTokenWrapper } from "../PoolTokenWrapper";

export class PoolTokenWrapper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PoolTokenWrapper> {
    return super.deploy(
      _tokenAddress,
      overrides || {}
    ) as Promise<PoolTokenWrapper>;
  }
  getDeployTransaction(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenAddress, overrides || {});
  }
  attach(address: string): PoolTokenWrapper {
    return super.attach(address) as PoolTokenWrapper;
  }
  connect(signer: Signer): PoolTokenWrapper__factory {
    return super.connect(signer) as PoolTokenWrapper__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolTokenWrapper {
    return new Contract(address, _abi, signerOrProvider) as PoolTokenWrapper;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fullAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawAmount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107123803806107128339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556106ad806100656000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318160ddd1461005c578063441a3e701461007657806370a082311461009b578063a694fc3a146100c1578063cbdf382c146100de575b600080fd5b610064610102565b60408051918252519081900360200190f35b6100996004803603604081101561008c57600080fd5b5080359060200135610108565b005b610064600480360360208110156100b157600080fd5b50356001600160a01b0316610161565b610099600480360360208110156100d757600080fd5b503561017c565b6100e66101d5565b604080516001600160a01b039092168252519081900360200190f35b60015490565b60015461011590836101e4565b6001553360009081526002602052604090205461013290836101e4565b33600081815260026020526040812092909255905461015d916001600160a01b039091169083610241565b5050565b6001600160a01b031660009081526002602052604090205490565b6001546101899082610298565b600155336000908152600260205260409020546101a69082610298565b3360008181526002602052604081209290925590546101d2916001600160a01b039091169030846102f9565b50565b6000546001600160a01b031681565b60008282111561023b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610293908490610359565b505050565b6000828201838110156102f2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610353908590610359565b50505050565b60606103ae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661040a9092919063ffffffff16565b805190915015610293578080602001905160208110156103cd57600080fd5b50516102935760405162461bcd60e51b815260040180806020018281038252602a81526020018061064e602a913960400191505060405180910390fd5b60606104198484600085610421565b949350505050565b6060824710156104625760405162461bcd60e51b81526004018080602001828103825260268152602001806106286026913960400191505060405180910390fd5b61046b8561057d565b6104bc576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106104fb5780518252601f1990920191602091820191016104dc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461055d576040519150601f19603f3d011682016040523d82523d6000602084013e610562565b606091505b5091509150610572828286610583565b979650505050505050565b3b151590565b606083156105925750816102f2565b8251156105a25782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105ec5781810151838201526020016105d4565b50505050905090810190601f1680156106195780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f3fda28bbd33e8bedc22cd5dd5f2f1474674fcccbd8ea9076ff4f29563d9f61e64736f6c634300060c0033";
