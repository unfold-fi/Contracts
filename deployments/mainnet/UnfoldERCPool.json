{
  "address": "0x6f79D18E94047974CCA5f1DfAC63b3955DDC6a7a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_poolToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeBeneficiar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiar",
          "type": "address"
        }
      ],
      "name": "FeeBeneficiarUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_despositTime",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawalFeeBp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBeneficiar",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDepositTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWithdrawFeeBp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_feeBeneficiar",
          "type": "address"
        }
      ],
      "name": "updateFeeBeneficiar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3fa28ad9ad3438d3f57a71968f88a07fbd6d07920efe983a0c1bad314a58497",
  "receipt": {
    "to": null,
    "from": "0x0b516a3990FcFaf7eE91ebB9fEfcF8B44fc4FB38",
    "contractAddress": "0x6f79D18E94047974CCA5f1DfAC63b3955DDC6a7a",
    "transactionIndex": 31,
    "gasUsed": "1324874",
    "logsBloom": "0x
    "blockHash": "0x41433a7981dfc4da8e8ab331a3d3ea57f2927909d32ba790428b1746224dcc42",
    "transactionHash": "0xb3fa28ad9ad3438d3f57a71968f88a07fbd6d07920efe983a0c1bad314a58497",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 12438243,
        "transactionHash": "0xb3fa28ad9ad3438d3f57a71968f88a07fbd6d07920efe983a0c1bad314a58497",
        "address": "0x6f79D18E94047974CCA5f1DfAC63b3955DDC6a7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b516a3990fcfaf7ee91ebb9fefcf8b44fc4fb38"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x41433a7981dfc4da8e8ab331a3d3ea57f2927909d32ba790428b1746224dcc42"
      }
    ],
    "blockNumber": 12438243,
    "cumulativeGasUsed": "3003726",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x88888e29427CC66EC72da12D72797fB1393Fffff",
    8640000,
    "0x9C35571380B72E78290fCFfd73b84b370904b988"
  ],
  "solcInputHash": "c150cabaf9c729e52ca495d3347c6623",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeBeneficiar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiar\",\"type\":\"address\"}],\"name\":\"FeeBeneficiarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_despositTime\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawalFeeBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBeneficiar\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawFeeBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeBeneficiar\",\"type\":\"address\"}],\"name\":\"updateFeeBeneficiar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateWithdrawalFeeBp(uint256)\":{\"notice\":\"Calculates withdrawal fee basis point.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/UnfoldERCPool.sol\":\"UnfoldERCPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/pool/PoolTokenWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\ncontract PoolTokenWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public poolToken;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(IERC20 _tokenAddress) public {\\n        poolToken = IERC20(_tokenAddress);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 fullAmount, uint256 withdrawAmount) public virtual {\\n        _totalSupply = _totalSupply.sub(fullAmount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(fullAmount);\\n        poolToken.safeTransfer(msg.sender, withdrawAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xef436b9b2b9dd960046710c02d14d1db76d18da29fcd1086c4bc3eb374c6bbe1\",\"license\":\"UNLICENSED\"},\"contracts/pool/UnfoldERCPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.12;\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport './PoolTokenWrapper.sol';\\n\\ncontract UnfoldERCPool is PoolTokenWrapper, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public rewardToken;\\n    uint256 public duration;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    mapping(address => uint256) public lastDepositTime;\\n\\n    address payable public feeBeneficiar;\\n\\n    uint256 public constant FEE_BASE = 10000;\\n    uint256 public constant minWithdrawFeeBp = 100;\\n\\n    event FeeBeneficiarUpdated(address indexed beneficiar);\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        IERC20 _poolToken,\\n        IERC20 _rewardToken,\\n        uint256 _duration,\\n        address payable _feeBeneficiar\\n    ) public PoolTokenWrapper(_poolToken) {\\n        rewardToken = _rewardToken;\\n        duration = _duration;\\n        feeBeneficiar = _feeBeneficiar;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function updateFeeBeneficiar(address payable _feeBeneficiar) external onlyOwner {\\n        require(_feeBeneficiar != address(0), 'UnfoldPool: fee beneficiar is 0x0');\\n        feeBeneficiar = _feeBeneficiar;\\n        emit FeeBeneficiarUpdated(_feeBeneficiar);\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(\\n                rewards[account]\\n            );\\n    }\\n\\n    function stake(uint256 _amount) public override updateReward(msg.sender) {\\n        require(_amount > 0, 'UnfoldPool: cannot stake 0');\\n\\n        lastDepositTime[msg.sender] = block.timestamp;\\n\\n        super.stake(_amount);\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount, uint256 _) public override updateReward(msg.sender) {\\n        require(_amount > 0, 'UnfoldPool: cannot withdraw 0');\\n        require(_amount == _, 'UnfoldPool: params should be eq');\\n\\n        uint256 fee = calculateWithdrawalFeeBp(lastDepositTime[msg.sender]);\\n        uint256 feeAmount = calculateFee(fee, _amount);\\n        uint256 withdrawAmount = _amount.sub(feeAmount);\\n\\n        poolToken.safeTransfer(feeBeneficiar, feeAmount);\\n\\n        super.withdraw(_amount, withdrawAmount);\\n\\n        emit Withdrawn(msg.sender, withdrawAmount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender), balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function addReward(uint256 reward) external onlyOwner updateReward(address(0)) {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(duration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(duration);\\n        }\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(duration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    /// Applies the fee by subtracting fees from the amount and returns\\n    /// the amount after deducting the fee.\\n    /// @dev it calculates (1 - fee) * amount\\n    function applyFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\\n        return _amount.mul(FEE_BASE.sub(_feeInBips)).div(FEE_BASE);\\n    }\\n\\n    /// Calculates the fee amount.\\n    /// @dev it calculates fee * amount\\n    function calculateFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\\n        return _amount.mul(_feeInBips).div(FEE_BASE);\\n    }\\n\\n    /// Calculates withdrawal fee basis point.\\n    function calculateWithdrawalFeeBp(uint256 _despositTime) public view returns (uint256) {\\n        uint256 fee = minWithdrawFeeBp;\\n        uint256 depositDuration = block.timestamp.sub(_despositTime);\\n\\n        if (depositDuration < 1 weeks) {\\n            fee = fee.mul(5);\\n        } else if (depositDuration >= 1 weeks && depositDuration < 2 weeks) {\\n            fee = fee.mul(4);\\n        } else if (depositDuration >= 2 weeks && depositDuration < 3 weeks) {\\n            fee = fee.mul(3);\\n        } else if (depositDuration >= 3 weeks && depositDuration < 4 weeks) {\\n            fee = fee.mul(2);\\n        }\\n        return fee;\\n    }\\n}\\n\",\"keccak256\":\"0x73b4c563b43d29449ec21b738b8478fea419109c4ce09b60c9cae749745d296d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526000600655600060075534801561001a57600080fd5b506040516115db3803806115db8339818101604052608081101561003d57600080fd5b50805160208201516040830151606090930151600080546001600160a01b0319166001600160a01b038516178155929391926100776100fd565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b039485166001600160a01b031991821617909155600592909255600d805491909316911617905550610101565b3390565b6114cb806101106000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c806380faa57d116100f9578063cd3daf9d11610097578063ebe2b12b11610071578063ebe2b12b146103c6578063ecefc705146103ce578063f2fde38b146103d6578063f7c618c1146103fc576101c3565b8063cd3daf9d146103ae578063df136d65146103b6578063e9fad8ee146103be576101c3565b80638da5cb5b116100d35780638da5cb5b14610379578063a694fc3a14610381578063c8f33c911461039e578063cbdf382c146103a6576101c3565b806380faa57d1461032757806383725b0e1461032f5780638b87634714610353576101c3565b8063441a3e7011610166578063715018a611610140578063715018a6146102f257806373dbf9f4146102fa57806374de4ec4146103025780637b0a47ee1461031f576101c3565b8063441a3e70146102835780634fe8d701146102a657806370a08231146102cc576101c3565b80630fb5a6b4116101a25780630fb5a6b41461024c57806318160ddd14610254578063199a0fa81461025c5780633d18b91214610279576101c3565b80628cc262146101c857806302527753146102005780630700037d14610226575b600080fd5b6101ee600480360360208110156101de57600080fd5b50356001600160a01b0316610404565b60408051918252519081900360200190f35b6101ee6004803603602081101561021657600080fd5b50356001600160a01b0316610472565b6101ee6004803603602081101561023c57600080fd5b50356001600160a01b0316610484565b6101ee610496565b6101ee61049c565b6101ee6004803603602081101561027257600080fd5b50356104a3565b61028161054a565b005b6102816004803603604081101561029957600080fd5b508035906020013561061c565b610281600480360360208110156102bc57600080fd5b50356001600160a01b03166107bd565b6101ee600480360360208110156102e257600080fd5b50356001600160a01b03166108ae565b6102816108c9565b6101ee610975565b6102816004803603602081101561031857600080fd5b503561097a565b6101ee610ae7565b6101ee610aed565b610337610b00565b604080516001600160a01b039092168252519081900360200190f35b6101ee6004803603602081101561036957600080fd5b50356001600160a01b0316610b0f565b610337610b21565b6102816004803603602081101561039757600080fd5b5035610b30565b6101ee610c35565b610337610c3b565b6101ee610c4a565b6101ee610c98565b610281610c9e565b6101ee610cc2565b6101ee610cc8565b610281600480360360208110156103ec57600080fd5b50356001600160a01b0316610cce565b610337610dd1565b6001600160a01b0381166000908152600b6020908152604080832054600a90925282205461046c919061046690670de0b6b3a764000090610460906104519061044b610c4a565b90610de0565b61045a886108ae565b90610e3d565b90610e9d565b90610f04565b92915050565b600c6020526000908152604090205481565b600b6020526000908152604090205481565b60055481565b6001545b90565b60006064816104b24285610de0565b905062093a808110156104d1576104ca826005610e3d565b9150610543565b62093a8081101580156104e657506212750081105b156104f6576104ca826004610e3d565b62127500811015801561050b5750621baf8081105b1561051b576104ca826003610e3d565b621baf80811015801561053057506224ea0081105b1561054357610540826002610e3d565b91505b5092915050565b33610553610c4a565b60095561055e610aed565b6008556001600160a01b038116156105a55761057981610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60006105b033610404565b9050801561061857336000818152600b60205260408120556004546105e1916001600160a01b039091169083610f5e565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050565b33610625610c4a565b600955610630610aed565b6008556001600160a01b038116156106775761064b81610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600083116106cc576040805162461bcd60e51b815260206004820152601d60248201527f556e666f6c64506f6f6c3a2063616e6e6f742077697468647261772030000000604482015290519081900360640190fd5b818314610720576040805162461bcd60e51b815260206004820152601f60248201527f556e666f6c64506f6f6c3a20706172616d732073686f756c6420626520657100604482015290519081900360640190fd5b336000908152600c6020526040812054610739906104a3565b905060006107478286610fb5565b905060006107558683610de0565b600d54600054919250610775916001600160a01b03908116911684610f5e565b61077f8682610fc7565b60408051828152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a2505050505050565b6107c561101c565b6001600160a01b03166107d6610b21565b6001600160a01b03161461081f576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b6001600160a01b0381166108645760405162461bcd60e51b815260040180806020018281038252602181526020018061142b6021913960400191505060405180910390fd5b600d80546001600160a01b0319166001600160a01b0383169081179091556040517fd1d47de4a57cc77fc7230b91c06532faf06a1485e840bd43ef755d6ca731a85990600090a250565b6001600160a01b031660009081526002602052604090205490565b6108d161101c565b6001600160a01b03166108e2610b21565b6001600160a01b03161461092b576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b606481565b61098261101c565b6001600160a01b0316610993610b21565b6001600160a01b0316146109dc576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b60006109e6610c4a565b6009556109f1610aed565b6008556001600160a01b03811615610a3857610a0c81610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b6006544210610a5757600554610a4f908390610e9d565b600755610a9a565b600654600090610a679042610de0565b90506000610a8060075483610e3d90919063ffffffff16565b600554909150610a94906104608684610f04565b60075550505b426008819055600554610aad9190610f04565b6006556040805183815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a15050565b60075481565b6000610afb42600654611020565b905090565b600d546001600160a01b031681565b600a6020526000908152604090205481565b6003546001600160a01b031690565b33610b39610c4a565b600955610b44610aed565b6008556001600160a01b03811615610b8b57610b5f81610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610be0576040805162461bcd60e51b815260206004820152601a60248201527f556e666f6c64506f6f6c3a2063616e6e6f74207374616b652030000000000000604482015290519081900360640190fd5b336000908152600c60205260409020429055610bfb82611036565b60408051838152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b60085481565b6000546001600160a01b031681565b6000610c5461049c565b610c6157506009546104a0565b610afb610c8f610c6f61049c565b610460670de0b6b3a764000061045a60075461045a60085461044b610aed565b60095490610f04565b60095481565b610cb8610caa336108ae565b610cb3336108ae565b61061c565b610cc061054a565b565b60065481565b61271081565b610cd661101c565b6001600160a01b0316610ce7610b21565b6001600160a01b031614610d30576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b6001600160a01b038116610d755760405162461bcd60e51b81526004018080602001828103825260268152602001806113be6026913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b600082821115610e37576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082610e4c5750600061046c565b82820282848281610e5957fe5b0414610e965760405162461bcd60e51b815260040180806020018281038252602181526020018061140a6021913960400191505060405180910390fd5b9392505050565b6000808211610ef3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610efc57fe5b049392505050565b600082820183811015610e96576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fb090849061108f565b505050565b6000610e966127106104608486610e3d565b600154610fd49083610de0565b60015533600090815260026020526040902054610ff19083610de0565b336000818152600260205260408120929092559054610618916001600160a01b039091169083610f5e565b3390565b600081831061102f5781610e96565b5090919050565b6001546110439082610f04565b600155336000908152600260205260409020546110609082610f04565b33600081815260026020526040812092909255905461108c916001600160a01b03909116903084611140565b50565b60606110e4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111a09092919063ffffffff16565b805190915015610fb05780806020019051602081101561110357600080fd5b5051610fb05760405162461bcd60e51b815260040180806020018281038252602a81526020018061146c602a913960400191505060405180910390fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261119a90859061108f565b50505050565b60606111af84846000856111b7565b949350505050565b6060824710156111f85760405162461bcd60e51b81526004018080602001828103825260268152602001806113e46026913960400191505060405180910390fd5b61120185611313565b611252576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106112915780518252601f199092019160209182019101611272565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146112f3576040519150601f19603f3d011682016040523d82523d6000602084013e6112f8565b606091505b5091509150611308828286611319565b979650505050505050565b3b151590565b60608315611328575081610e96565b8251156113385782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561138257818101518382015260200161136a565b50505050905090810190601f1680156113af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77556e666f6c64506f6f6c3a206665652062656e65666963696172206973203078304f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201174656dd68dab5a80d083aaa855b30f8a31fe668b121f4655e58c0f514961fa64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c806380faa57d116100f9578063cd3daf9d11610097578063ebe2b12b11610071578063ebe2b12b146103c6578063ecefc705146103ce578063f2fde38b146103d6578063f7c618c1146103fc576101c3565b8063cd3daf9d146103ae578063df136d65146103b6578063e9fad8ee146103be576101c3565b80638da5cb5b116100d35780638da5cb5b14610379578063a694fc3a14610381578063c8f33c911461039e578063cbdf382c146103a6576101c3565b806380faa57d1461032757806383725b0e1461032f5780638b87634714610353576101c3565b8063441a3e7011610166578063715018a611610140578063715018a6146102f257806373dbf9f4146102fa57806374de4ec4146103025780637b0a47ee1461031f576101c3565b8063441a3e70146102835780634fe8d701146102a657806370a08231146102cc576101c3565b80630fb5a6b4116101a25780630fb5a6b41461024c57806318160ddd14610254578063199a0fa81461025c5780633d18b91214610279576101c3565b80628cc262146101c857806302527753146102005780630700037d14610226575b600080fd5b6101ee600480360360208110156101de57600080fd5b50356001600160a01b0316610404565b60408051918252519081900360200190f35b6101ee6004803603602081101561021657600080fd5b50356001600160a01b0316610472565b6101ee6004803603602081101561023c57600080fd5b50356001600160a01b0316610484565b6101ee610496565b6101ee61049c565b6101ee6004803603602081101561027257600080fd5b50356104a3565b61028161054a565b005b6102816004803603604081101561029957600080fd5b508035906020013561061c565b610281600480360360208110156102bc57600080fd5b50356001600160a01b03166107bd565b6101ee600480360360208110156102e257600080fd5b50356001600160a01b03166108ae565b6102816108c9565b6101ee610975565b6102816004803603602081101561031857600080fd5b503561097a565b6101ee610ae7565b6101ee610aed565b610337610b00565b604080516001600160a01b039092168252519081900360200190f35b6101ee6004803603602081101561036957600080fd5b50356001600160a01b0316610b0f565b610337610b21565b6102816004803603602081101561039757600080fd5b5035610b30565b6101ee610c35565b610337610c3b565b6101ee610c4a565b6101ee610c98565b610281610c9e565b6101ee610cc2565b6101ee610cc8565b610281600480360360208110156103ec57600080fd5b50356001600160a01b0316610cce565b610337610dd1565b6001600160a01b0381166000908152600b6020908152604080832054600a90925282205461046c919061046690670de0b6b3a764000090610460906104519061044b610c4a565b90610de0565b61045a886108ae565b90610e3d565b90610e9d565b90610f04565b92915050565b600c6020526000908152604090205481565b600b6020526000908152604090205481565b60055481565b6001545b90565b60006064816104b24285610de0565b905062093a808110156104d1576104ca826005610e3d565b9150610543565b62093a8081101580156104e657506212750081105b156104f6576104ca826004610e3d565b62127500811015801561050b5750621baf8081105b1561051b576104ca826003610e3d565b621baf80811015801561053057506224ea0081105b1561054357610540826002610e3d565b91505b5092915050565b33610553610c4a565b60095561055e610aed565b6008556001600160a01b038116156105a55761057981610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60006105b033610404565b9050801561061857336000818152600b60205260408120556004546105e1916001600160a01b039091169083610f5e565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050565b33610625610c4a565b600955610630610aed565b6008556001600160a01b038116156106775761064b81610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600083116106cc576040805162461bcd60e51b815260206004820152601d60248201527f556e666f6c64506f6f6c3a2063616e6e6f742077697468647261772030000000604482015290519081900360640190fd5b818314610720576040805162461bcd60e51b815260206004820152601f60248201527f556e666f6c64506f6f6c3a20706172616d732073686f756c6420626520657100604482015290519081900360640190fd5b336000908152600c6020526040812054610739906104a3565b905060006107478286610fb5565b905060006107558683610de0565b600d54600054919250610775916001600160a01b03908116911684610f5e565b61077f8682610fc7565b60408051828152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a2505050505050565b6107c561101c565b6001600160a01b03166107d6610b21565b6001600160a01b03161461081f576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b6001600160a01b0381166108645760405162461bcd60e51b815260040180806020018281038252602181526020018061142b6021913960400191505060405180910390fd5b600d80546001600160a01b0319166001600160a01b0383169081179091556040517fd1d47de4a57cc77fc7230b91c06532faf06a1485e840bd43ef755d6ca731a85990600090a250565b6001600160a01b031660009081526002602052604090205490565b6108d161101c565b6001600160a01b03166108e2610b21565b6001600160a01b03161461092b576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b606481565b61098261101c565b6001600160a01b0316610993610b21565b6001600160a01b0316146109dc576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b60006109e6610c4a565b6009556109f1610aed565b6008556001600160a01b03811615610a3857610a0c81610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b6006544210610a5757600554610a4f908390610e9d565b600755610a9a565b600654600090610a679042610de0565b90506000610a8060075483610e3d90919063ffffffff16565b600554909150610a94906104608684610f04565b60075550505b426008819055600554610aad9190610f04565b6006556040805183815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a15050565b60075481565b6000610afb42600654611020565b905090565b600d546001600160a01b031681565b600a6020526000908152604090205481565b6003546001600160a01b031690565b33610b39610c4a565b600955610b44610aed565b6008556001600160a01b03811615610b8b57610b5f81610404565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610be0576040805162461bcd60e51b815260206004820152601a60248201527f556e666f6c64506f6f6c3a2063616e6e6f74207374616b652030000000000000604482015290519081900360640190fd5b336000908152600c60205260409020429055610bfb82611036565b60408051838152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b60085481565b6000546001600160a01b031681565b6000610c5461049c565b610c6157506009546104a0565b610afb610c8f610c6f61049c565b610460670de0b6b3a764000061045a60075461045a60085461044b610aed565b60095490610f04565b60095481565b610cb8610caa336108ae565b610cb3336108ae565b61061c565b610cc061054a565b565b60065481565b61271081565b610cd661101c565b6001600160a01b0316610ce7610b21565b6001600160a01b031614610d30576040805162461bcd60e51b8152602060048201819052602482015260008051602061144c833981519152604482015290519081900360640190fd5b6001600160a01b038116610d755760405162461bcd60e51b81526004018080602001828103825260268152602001806113be6026913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b600082821115610e37576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082610e4c5750600061046c565b82820282848281610e5957fe5b0414610e965760405162461bcd60e51b815260040180806020018281038252602181526020018061140a6021913960400191505060405180910390fd5b9392505050565b6000808211610ef3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610efc57fe5b049392505050565b600082820183811015610e96576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fb090849061108f565b505050565b6000610e966127106104608486610e3d565b600154610fd49083610de0565b60015533600090815260026020526040902054610ff19083610de0565b336000818152600260205260408120929092559054610618916001600160a01b039091169083610f5e565b3390565b600081831061102f5781610e96565b5090919050565b6001546110439082610f04565b600155336000908152600260205260409020546110609082610f04565b33600081815260026020526040812092909255905461108c916001600160a01b03909116903084611140565b50565b60606110e4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111a09092919063ffffffff16565b805190915015610fb05780806020019051602081101561110357600080fd5b5051610fb05760405162461bcd60e51b815260040180806020018281038252602a81526020018061146c602a913960400191505060405180910390fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261119a90859061108f565b50505050565b60606111af84846000856111b7565b949350505050565b6060824710156111f85760405162461bcd60e51b81526004018080602001828103825260268152602001806113e46026913960400191505060405180910390fd5b61120185611313565b611252576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106112915780518252601f199092019160209182019101611272565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146112f3576040519150601f19603f3d011682016040523d82523d6000602084013e6112f8565b606091505b5091509150611308828286611319565b979650505050505050565b3b151590565b60608315611328575081610e96565b8251156113385782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561138257818101518382015260200161136a565b50505050905090810190601f1680156113af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77556e666f6c64506f6f6c3a206665652062656e65666963696172206973203078304f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201174656dd68dab5a80d083aaa855b30f8a31fe668b121f4655e58c0f514961fa64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateWithdrawalFeeBp(uint256)": {
        "notice": "Calculates withdrawal fee basis point."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1662,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "poolToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1118"
      },
      {
        "astId": 1664,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1668,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1794,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1118"
      },
      {
        "astId": 1796,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "duration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1799,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "periodFinish",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1802,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1804,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1806,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1810,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1814,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1818,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "lastDepositTime",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1820,
        "contract": "contracts/pool/UnfoldERCPool.sol:UnfoldERCPool",
        "label": "feeBeneficiar",
        "offset": 0,
        "slot": "13",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}